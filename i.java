class TrigComplex {

	// **************************************************************************************************************
	// Переменные класса. (Поля класса). Описывают состояние объекта.
	// Например: в "real" хранится дзначение действительной части комплексного числа, в "imaginary" -- мнимой.
	// **************************************************************************************************************

	double real;
	double imaginary;


	// **************************************************************************************************************
	// Конструкторы. Когда создаешь объект класса, происходят действия, описанные в нём.
	// **************************************************************************************************************

	TrigComplex(double re, double im) { // Этот конструткор -- конструктор с параметрами.
		real = re; // В поле "real" текущего объекта помещается значение переменной "re", переданной в аргументах
		imaginary = im;
	}

	TrigComplex(TrigComplex a) { // Этот конструткор -- конструктор копирования. В аргументе передается объект того же класса. Полученный объект -- копия старого.
		real = a.real; // В поле "real" текущего объекта помещается значение поля "real" объекта, переданного в аргументе.
		imaginary = a.imaginary;
	}

	TrigComplex() { // Этот конструткор -- стандартный (пустой). Не принимает аргументов, создает объект со стандартными значениями. Например: (0, 0).
		real = 0; // Поле "real" текущего объекта заполняется значением "по умолчанию".
		imaginary = 0;
	}

	// **************************************************************************************************************
	// Методы класса. Метод -- некоторая функция, изменяющая состояние полей класса или каким-то образом взаимодействующая с ними.
	// **************************************************************************************************************

	public TrigComplex add(TrigComplex b) { 
		// 1.	"public" говорит о том, что этот метод виден извне. К нему можно обратиться из любого места программы.
		// 2.	"TrigComplex" -- тип(в данном случае класс) объекта, который будет получен в результате выполнения этого метода. (return).
		//			Если тип не важен и возвращать ничего не нужно -- нужно писать "void"
		// 3.	"add" -- название метода. Затем мы обратимся к нему примерно в следующем виде:
		//			c = a.add(b); // что в математике было бы эквивалентно записи с = a + b.
		// 4.	"(TrigComplex b)" -- В скобках после названия метода идёт перечисление аргументов с указанием типов, передаваемых в метод.
		// 			В данном случае указан всего один объект "b" класса "TrigComplex"
		//			Если аргументов передавать не нужно -- пустые кругдые скобки должны присутствовать всё равно. 
		// 5. 	В фигурных скобках -- тело метода. Код, который должен быть выполнен при вызове метода.

		TrigComplex c_real = real + b.real; // создаем переменную и сразу присваиваем ей значение.
		// "real" -- значение поля "real" текущего объекта, "b.real" -- значение поля "real" объекта "b", переданного в аргументах
		TrigComplex c_imaginary = imaginary + b.imaginary;


		TrigComplex c; // Создаем переменную класса "TrigComplex". На этом этапе происходит выделение памяти под переменную, однако у неё ещё нет значения.
		с = new TrigComplex(c_real, c_imaginary); // Используем конструетор с параметрами для присваивания объекту его первого значения.

		return c; // Возвращаем объект "с" класса TrigComplex
	}

	public TrigComplex mul(TrigComplex b) { 
		TrigComplex c;
		с = new TrigComplex(real*b.real - imaginary*b.imaginary, real*b.imaginary + imaginary*b.real); // проверь.
		return c;
	}

	public TrigComplex pow(int p) { 
		
		// нехороший способ

		double c_re;
		double c_im;

		for (int i = 0; i < p; i++) {
			c_re *= real*real - imaginary*imaginary;
			c_im *= real*imaginary + imaginary*real;
		}

		TrigComplex c = new TrigComplex(c_re, c_im);

		return c;
	}
}
